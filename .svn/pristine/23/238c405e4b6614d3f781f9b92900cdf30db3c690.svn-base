using System;
using System.Net;
using System.Net.Sockets;
using Avalonia.Controls;
using Avalonia.Input;
using Avalonia.Interactivity;
using Avalonia.Threading;
using JACService.Core;
using JACService.Shared;

namespace JAC.Views;

public partial class MainView : UserControl
{
    #region instancevariables
    readonly Socket _clientSocket;
    
    readonly SocketWriter _writer;

    ChatUser _chatUser;

    readonly ChatMessageStorage _chatMessageStorage;
    
    readonly ChatDirectory _directory;
    
    readonly MessageReceiver _messageReceiver;
    
    string _maskedPassword = "";
    
    bool _isEditingPassword;
    #endregion

    #region constructor
    public MainView()
    {
        InitializeComponent();
        
        Login.IsVisible = true;
        BrdSettings.IsVisible = false;
        ChatApp.IsVisible = false;
        ChannelName.IsVisible = false;
        Chat.IsVisible = false;
        JustAnotherChat.IsVisible = true;

        ChatClient chatClient = ChatClient.GetInstance();
        _clientSocket = chatClient.ClientSocket;
        _writer = chatClient.Writer;
        
        _chatUser = new ChatUser();
        
        _chatMessageStorage = ChatMessageStorage.GetInstance();

        _directory = ChatDirectory.GetInstance();
        
        _messageReceiver = new MessageReceiver(_clientSocket);
        _messageReceiver.MessageReceived += OnMessageReceived;
        
        LblLoginDate.Content = DateTime.Today.Date.ToString("dd.MM.yyyy");
        LblRequestDate.Content = DateTime.Today.Date.ToString("dd.MM.yyyy");

        _isEditingPassword = false;
    }
    #endregion

    #region methods
    private void TbxNickname_OnTextChanged(object sender, TextChangedEventArgs e)
    {
        TblPlaceHolderNickname.IsVisible = string.IsNullOrEmpty(TbxNickname.Text);
    }
    
    private void TbxPassword_OnTextChanged(object sender, TextChangedEventArgs e)
    {
        TblPlaceHolderPassword.IsVisible = string.IsNullOrEmpty(TbxPassword.Text);
        
        if (_isEditingPassword)
        {
            if (!string.IsNullOrEmpty(TbxPassword.Text))
            {
                _maskedPassword = TbxPassword.Text;
            }
        }
        else
        {
            TextBox password = (TextBox)sender;

            if (!string.IsNullOrEmpty(password.Text) && password.Text.Length > _maskedPassword.Length)
            {
                _maskedPassword += password.Text[^1];
                password.Text = new string('*', _maskedPassword.Length);
            }
            else
            {
                if (!string.IsNullOrEmpty(password.Text))
                {
                    _maskedPassword = _maskedPassword.Substring(0, password.Text.Length);
                }
            }
        }
    }
    
    private void TbxRequest_OnTextChanged(object sender, TextChangedEventArgs e)
    {
        if (!string.IsNullOrEmpty(TbxRequest.Text))
        {
            TblPlaceHolderMessage.IsVisible = false;
            BtnSendMessage.IsVisible = true;
        }
        else
        {
            TblPlaceHolderMessage.IsVisible = true;
            BtnSendMessage.IsVisible = false;
        }
    }
    
    private void TbxNickname_OnKeyDown(object sender, KeyEventArgs e)
    {
        if (e.Key == Key.Enter)
        {
            BtnLogin_OnClick(sender, e);
        }
    }
    
    private void TbxPassword_OnKeyDown(object sender, KeyEventArgs e)
    {
        if (e.Key == Key.Enter)
        {
            BtnLogin_OnClick(sender, e);
        }
    }
    
    private void TbxRequest_OnKeyDown(object sender, KeyEventArgs e)
    {
        if (e.Key == Key.Enter)
        {
            BtnSendMessage_OnClick(sender, e);
        }
    }
    
    private void BtnShowPassword_OnClick(object sender, RoutedEventArgs e)
    {
        if (!string.IsNullOrEmpty(TbxPassword.Text))
        {
            TbxPassword.Text = _maskedPassword;
            _isEditingPassword = true;
        
            BtnShowPassword.IsVisible = false;
            BtnHidePassword.IsVisible = true;
        }
    }

    private void BtnHidePassword_OnClick(object sender, RoutedEventArgs e)
    {
        if (!string.IsNullOrEmpty(TbxPassword.Text))
        {
            TbxPassword.Text = new string('*', _maskedPassword.Length);
            _isEditingPassword = false;
        
            BtnShowPassword.IsVisible = true;
            BtnHidePassword.IsVisible = false;
        }
    }

    private void BtnLogin_OnClick(object sender, RoutedEventArgs e)
    {
        LblInputMissing.IsVisible = false;
        LblLoginError.IsVisible = false;

        if (!string.IsNullOrEmpty(TbxNickname.Text) && !string.IsNullOrEmpty(_maskedPassword))
        {
            IPEndPoint endPoint = new IPEndPoint(IPAddress.Parse(TcpService.Ip), TcpService.Port);

            if (!_clientSocket.Connected)
            {
                _clientSocket.Connect(endPoint);
                _messageReceiver.Start();
            }

            _writer.SendText($"/login {TbxNickname.Text.Trim()} {_maskedPassword}");

            TbxNickname.Text = "";
            TbxPassword.Text = "";
        }
        else
        {
            LblInputMissing.IsVisible = true;
        }
    }
    
    private void BtnLogout_OnClick(object sender, RoutedEventArgs e)
    {
        _chatUser.Logout();
        _messageReceiver.Stop();
        
        _writer.SendText("/logout");
        
        Environment.Exit(0);
    }
    
    private void BtnSettings_OnClick(object sender, RoutedEventArgs e)
    {
        BrdSettings.IsVisible = true;
        
        TbxName.Text = _chatUser.Nickname;
        TbxPasscode.Text = _chatUser.Password;
    }

    private void BtnRemoveChannel_OnClick(object sender, RoutedEventArgs e)
    {
        Channels.Items.Remove(_chatUser.CurrentChannel);
        
        Channels.Items.Clear();
        foreach (IChannel channel in _directory.Channels)
        {
            Channels.Items.Add(channel);
        }
        
        ChannelScrollViewer.ScrollToEnd();
    }
    
    private void TbxName_OnTextChanged(object sender, TextChangedEventArgs e)
    {
        if (!string.IsNullOrEmpty(TbxName.Text))
        {
            TblPlaceHolderName.IsVisible = false;
        }
        else
        {
            TblPlaceHolderName.IsVisible = true;
        }
    }

    private void TbxPasscode_OnTextChanged(object sender, TextChangedEventArgs e)
    {
        if (!string.IsNullOrEmpty(TbxPasscode.Text))
        {
            TblPlaceHolderPasscode.IsVisible = false;
        }
        else
        {
            TblPlaceHolderPasscode.IsVisible = true;
        }
    }
    
    private void BtnClose_OnClick(object sender, RoutedEventArgs e)
    {
        BrdSettings.IsVisible = false;
    }

    private void BtnChat_OnClick(object sender, RoutedEventArgs e)
    {
        ChannelName.IsVisible = true;
        Chat.IsVisible = true;
        JustAnotherChat.IsVisible = false;
    }

    private void BtnSendMessage_OnClick(object sender, RoutedEventArgs e)
    {
        if (!string.IsNullOrEmpty(TbxRequest.Text))
        {
            IUser user = _directory.FindUser(LblNickname.Content!.ToString()!);

            user.CurrentChannel.CheckIfPrivate();

            if (_directory.FindChannel(user.CurrentChannel) != null)
            {
                if (!user.CurrentChannel.IsPrivate)
                {
                    _writer.SendText($"/broadcast {user.CurrentChannel.Name} |{TbxRequest.Text.Trim()}");
                }
                else
                {
                    _writer.SendText($"/whisper {user.CurrentChannel.Name} |{TbxRequest.Text.Trim()}");
                }
            }

            TbxRequest.Text = "";
        }
    }

    private void HandleMessage(string message)
    {
        if (message.StartsWith("Login-success"))
        {
            string[] splitter = message.Split(' ');
            string user = message.Substring(splitter[0].Length);
            _chatUser = ChatUser.FromString(user);
            
            _directory.AddUser(_chatUser);
            _directory.AddChannel(_chatUser.CurrentChannel);
            
            Login.IsVisible = false;
            ChatApp.IsVisible = true;
            
            LblNickname.Content = _chatUser.Nickname;
        }
        else if (message.StartsWith("MessageReceived"))
        {
            string[] splitter = message.Split(' ');
            string messageString = message.Substring(splitter[0].Length).Trim();
            
            IChatMessage chatMessage = ChatMessage.FromString(messageString);
            _chatMessageStorage.AddMessage(chatMessage);
            AddMessage(chatMessage);
        }
        else if (message.StartsWith("Channel"))
        {
            string[] splitter = message.Split(' ');
            _chatUser.CurrentChannel = new Channel(splitter[1]);
        }
        else if (message.StartsWith("Error"))
        {
            LblLoginError.IsVisible = true;
            
            TbxNickname.Text = "";
            TbxPassword.Text = "";
        }
    }
    
    private void AddMessage(IChatMessage message)
    {
        ChatMessages.Items.Add(message);
        
        ChatScrollViewer.ScrollToEnd();
    }
    
    private void OnMessageReceived(object? sender, MessageReceivedEventArgs e)
    {
        Dispatcher.UIThread.InvokeAsync(() => HandleMessage(e.Message));
    }
    #endregion
}