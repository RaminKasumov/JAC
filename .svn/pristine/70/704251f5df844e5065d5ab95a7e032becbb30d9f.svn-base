using System;
using System.Collections.Generic;
using JAC.Shared;
using JACService.Core.Contracts;

namespace JAC.Service.Core
{
    public class MessageDispatcher
    {
        #region instancevariables
        /// <summary>
        /// Instance variable for List of Sessions
        /// </summary>
        readonly List<SessionHandler> _sessions;
        
        /// <summary>
        /// Instance variable for Interface IServiceLogger
        /// </summary>
        readonly IServiceLogger _serviceLogger;

        /// <summary>
        /// Instance variable for ChatMessageReceivedEventArgs
        /// </summary>
        ChatMessageReceivedEventArgs _chatMessageReceived;
        #endregion
        
        #region constructor
        /// <summary>
        /// Instance variables are being initialized
        /// </summary>
        /// <param name="sessions">List of sessions</param>
        /// <param name="serviceLogger">ServiceLogger</param>
        public MessageDispatcher(List<SessionHandler> sessions, IServiceLogger serviceLogger)
        {
            _sessions = sessions;
            _serviceLogger = serviceLogger;
        }
        #endregion
        
        #region methods
        /// <summary>
        /// Broadcasts a message to all users
        /// </summary>
        public void Broadcast(IChatMessage chatMessage)
        {
            _chatMessageReceived = new ChatMessageReceivedEventArgs(chatMessage);
            
            _sessions.FindAll(session => session.ChatUser.CurrentChannel == chatMessage.Recipient).ForEach(session => session.SendText("MessageReceived: " + _chatMessageReceived.Message));
            
            _serviceLogger.LogBroadcastMessage($"[{DateTime.Now.ToShortTimeString()}] Broadcast message was received.");
        }
        
        /// <summary>
        /// Sends a message to a specific user
        /// </summary>
        public void Whisper(IChatMessage chatMessage)
        {
            _chatMessageReceived = new ChatMessageReceivedEventArgs(chatMessage);
            
            _sessions.FindAll(session => session.ChatUser.Nickname == chatMessage.Recipient).ForEach(session => session.SendText("MessageReceived: " + _chatMessageReceived.Message));
            
            _serviceLogger.LogWhisperMessage($"[{DateTime.Now.ToShortTimeString()}] Whisper message was received.");
        }
        #endregion
    }
}