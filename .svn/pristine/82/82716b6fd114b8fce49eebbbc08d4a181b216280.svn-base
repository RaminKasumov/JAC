using JACService.Shared;
using JACService.Core.Contracts;

namespace JACService.Core
{
    public class LoginRequestHandler : ITextRequest
    {
        #region instancevariable
        /// <summary>
        /// Instance variable for User
        /// </summary>
        IUser _user = null!;
        #endregion
        
        #region eventHandler
        /// <summary>
        /// EventHandler for ChatUser who is logged in
        /// </summary>
        public static event Action<IUser>? UserLoggedIn;
        #endregion
        
        #region methods
        /// <summary>
        /// Command of Client is being processed
        /// </summary>
        /// <param name="command">Command of Client</param>
        /// <returns>Returns a response to Client</returns>
        public string GetResponse(string command)
        {
            string[] splitter = command.Split(' ');
            string nickname = command.Substring(splitter[0].Length, command.LastIndexOf(' ') - splitter[0].Length).Trim();
            string password = command.Substring(command.LastIndexOf(' ') + 1).Trim();
            ChatDirectory directory = ChatDirectory.GetInstance();

            if (directory.FindUser(nickname) == null)
            {
                _user = new ChatUser(nickname, password);
                
                directory.AddUser(_user);
                
                foreach (IChannel channel in directory.GetChannels())
                {
                    if (!channel.IsPrivate)
                    {
                        channel.AddUser(_user);
                    }
                }
            }
            else
            {
                _user = directory.FindUser(nickname);
                
                if (_user.Password != password)
                {
                    return "Error: Wrong password!!!";
                }
            }
            
            _user.Login();
            OnUserLoggedIn(_user);
            return $"Login-success: {_user}";
        }

        /// <summary>
        /// Raises the UserLoggedIn event by invoking it, notifying subscribers about the user login
        /// </summary>
        /// <param name="user">User</param>
        private void OnUserLoggedIn(IUser user)
        {
            UserLoggedIn?.Invoke(user);
        }
        #endregion
    }
}