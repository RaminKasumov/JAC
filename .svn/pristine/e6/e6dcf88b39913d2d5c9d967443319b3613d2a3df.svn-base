using JACService.Core.Contracts;
using JACService.Shared;

namespace JACService.Core
{
    /// <summary>
    /// Handles requests for creating a new channel
    /// </summary>
    public class CreateChannelRequestHandler : ITextRequest
    {
        #region instancevariable
        /// <summary>
        /// The session handler instance
        /// </summary>
        readonly SessionHandler _session;
        #endregion
        
        #region constructor
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateChannelRequestHandler"/> class
        /// </summary>
        /// <param name="session">The session handler</param>
        public CreateChannelRequestHandler(SessionHandler session)
        {
            _session = session;
        }
        #endregion
    
        #region method
        /// <summary>
        /// Processes the client's command and returns a response
        /// </summary>
        /// <param name="command">The command from the client</param>
        /// <returns>A response to the client</returns>
        public string GetResponse(string command)
        {
            ChatDirectory directory = ChatDirectory.GetInstance();
        
            string[] splitter = command.Split(' ');
            string channelType = splitter[2].Trim();
            string user = splitter[4].Trim();
            IChannel newChannel;

            if (channelType == "private")
            {
                if (directory.FindUser(user) != null)
                {
                    IUser chatUser = directory.FindUser(user);
                    string channelName = $"{_session.ChatUser.Nickname}/{chatUser.Nickname}";
                    newChannel = new Channel(channelName) { IsPrivate = true };
                
                    newChannel.AddUser(chatUser);
                }
                else
                {
                    return "Error: User does not exist!!!";
                }
            }
            else
            {
                newChannel = new Channel(splitter[4].Trim());
            }
        
            newChannel.AddUser(_session.ChatUser);

            if (directory.GetChannels().All(channel => !channel.Name.Contains(newChannel.Name)))
            {
                directory.AddChannel(newChannel);
                return $"Channel {newChannel.Name} created.";
            }

            return "Channel already exists!!!";
        }
        #endregion
    }
}