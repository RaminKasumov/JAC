using System;
using System.Net;
using System.Net.Sockets;
using Avalonia.Controls;
using Avalonia.Input;
using Avalonia.Interactivity;
using Avalonia.Threading;
using JAC.Shared;
using JACService.Core.Contracts;

namespace JAC.Views;

public partial class MainView : UserControl
{
    #region instancevariables
    readonly Socket _clientSocket;
    
    readonly SocketWriter _writer;

    readonly ChatMessageStorage _chatMessageStorage;
    
    readonly MessageReceiver _messageReceiver;
    #endregion

    #region constructor
    public MainView()
    {
        InitializeComponent();
        
        Login.IsVisible = true;
        ChatApp.IsVisible = false;
        ChannelName.IsVisible = false;
        Chat.IsVisible = false;
        JustAnotherChat.IsVisible = true;

        ChatClient chatClient = ChatClient.GetInstance();
        _clientSocket = chatClient.ClientSocket;
        _writer = chatClient.Writer;
        _chatMessageStorage = ChatMessageStorage.GetInstance();
        
        _messageReceiver = new MessageReceiver(_clientSocket);
        _messageReceiver.MessageReceived += OnMessageReceived;
        
        LblLoginDate.Content = DateTime.Today.Date.ToString("dd.MM.yyyy");
        LblRequestDate.Content = DateTime.Today.Date.ToString("dd.MM.yyyy");
    }
    #endregion

    #region methods
    private void TbxNickname_OnTextChanged(object sender, TextChangedEventArgs e)
    {
        TblPlaceHolder.IsVisible = string.IsNullOrEmpty(TbxNickname.Text);
    }
    
    private void TbxRequest_OnTextChanged(object sender, TextChangedEventArgs e)
    {
        if (!string.IsNullOrEmpty(TbxRequest.Text))
        {
            TblPlaceHolderMessage.IsVisible = false;
            BtnSendMessage.IsVisible = true;
        }
        else
        {
            TblPlaceHolderMessage.IsVisible = true;
            BtnSendMessage.IsVisible = false;
        }
    }
    
    private void TbxNickname_OnKeyDown(object sender, KeyEventArgs e)
    {
        if (e.Key == Key.Enter)
        {
            BtnLogin_OnClick(sender, e);
        }
    }
    
    private void TbxRequest_OnKeyDown(object sender, KeyEventArgs e)
    {
        if (e.Key == Key.Enter)
        {
            BtnSendMessage_OnClick(sender, e);
        }
    }

    private void BtnClearMessage_OnClick(object sender, RoutedEventArgs e)
    {
        TbxNickname.Text = "";
        TbxNickname.Focus();
        TblPlaceHolder.IsVisible = true;
    }

    private void BtnLogin_OnClick(object sender, RoutedEventArgs e)
    {
        LblNicknameMissing.IsVisible = false;
        LblLoginError.IsVisible = false;

        if (!string.IsNullOrEmpty(TbxNickname.Text))
        {
            IPEndPoint endPoint = new IPEndPoint(IPAddress.Loopback, 4711);

            if (!_clientSocket.Connected)
            {
                _clientSocket.Connect(endPoint);
                _messageReceiver.Start();
            }

            _writer.SendText($"/login {TbxNickname.Text}");
            TbxNickname.Text = "";
        }
        else
        {
            LblNicknameMissing.IsVisible = true;
        }
    }

    private void BtnAnonymousChat_OnClick(object sender, RoutedEventArgs e)
    {
        ChannelName.IsVisible = true;
        Chat.IsVisible = true;
        JustAnotherChat.IsVisible = false;
    }

    private void BtnSendMessage_OnClick(object sender, RoutedEventArgs e)
    {
        if (!string.IsNullOrEmpty(TbxRequest.Text))
        {
            ChatDirectory chatDirectory = ChatDirectory.GetInstance();
            IUser user = chatDirectory.FindUser(LblNickname.Content as string);
            
            if (chatDirectory.FindChannel(user.CurrentChannel) != null)
            {
                _writer.SendText($"/broadcast {user.CurrentChannel} |{TbxRequest.Text}");
            }
            else
            {
                if (chatDirectory.FindUser(user.Nickname) != null)
                {
                    _writer.SendText($"/whisper {user.Nickname} |{TbxRequest.Text}");
                }
            }
            
            TbxRequest.Text = "";
        }
    }

    private void HandleMessage(string message)
    {
        if (message.StartsWith("Error"))
        {
            string errorMessage = message.Split(' ')[1];
            LblLoginError.Content = errorMessage;
            LblLoginError.IsVisible = true;
        }
        else if (message.StartsWith("Login-success"))
        {
            string[] splitter = message.Split(' ');
            string user = message.Substring(splitter[0].Length);
            ChatUser chatUser = ChatUser.FromString(user);
            
            ChatDirectory chatDirectory = ChatDirectory.GetInstance();
            chatDirectory.AddUser(chatUser);
            chatDirectory.AddChannel(chatUser.CurrentChannel);
            
            Login.IsVisible = false;
            ChatApp.IsVisible = true;
            LblNickname.Content = chatUser.Nickname;
        }
        else if (message.StartsWith("MessageReceived"))
        {
            string[] splitter = message.Split(' ');
            string messageString = message.Substring(splitter[0].Length);
            
            IChatMessage chatMessage = ChatMessage.FromString(messageString);
            _chatMessageStorage.AddMessage(chatMessage);
            AddMessage(chatMessage);
        }
        else
        {
            LblLoginError.IsVisible = true;
        }
    }
    
    private void AddMessage(IChatMessage message)
    {
        ChatMessages.Items.Add(message);
        
        ChatScrollViewer.ScrollToEnd();
    }
    
    private void OnMessageReceived(object? sender, MessageReceivedEventArgs e)
    {
        Dispatcher.UIThread.InvokeAsync(() => HandleMessage(e.Message));
    }
    #endregion
}