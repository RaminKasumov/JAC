using System.Net.Sockets;

namespace JACService.Shared
{
    public class MessageReceiver
    {
        #region instancevariable
        /// <summary>
        /// Instance variable for SocketReader
        /// </summary>
        readonly SocketReader _reader;
        #endregion
        
        #region property
        /// <summary>
        /// Auto-property to find out if the recipient is receiving messages
        /// </summary>
        private bool IsReceiving { get; set; }
        #endregion
        
        #region constant
        /// <summary>
        /// Constant for size of message
        /// </summary>
        const int BufferSize = 1024;
        #endregion

        #region eventHandler
        /// <summary>
        /// EventHandler for MessageReceived
        /// </summary>
        public event EventHandler<MessageReceivedEventArgs>? MessageReceived;
        #endregion

        #region constructor
        /// <summary>
        /// Instance variables are being initialized
        /// </summary>
        /// <param name="socket">Socket</param>
        public MessageReceiver(Socket socket)
        {
            _reader = new SocketReader(socket, BufferSize);
        }
        #endregion

        #region methods
        /// <summary>
        /// Starts the receiving of messages
        /// </summary>
        public void Start()
        {
            if (!IsReceiving)
            {
                IsReceiving = true;

                Thread thread = new Thread(ReceiveMessages)
                {
                    IsBackground = true
                };
                thread.Start();
            }
        }

        /// <summary>
        /// Stops the receiving of messages
        /// </summary>
        public void Stop()
        {
            IsReceiving = false;
        }

        /// <summary>
        /// Receives messages and raises the MessageReceived event
        /// </summary>
        private void ReceiveMessages()
        {
            while (IsReceiving)
            {
                try
                {
                    string receivedMessage = _reader.ReceiveText();
                    OnMessageReceived(receivedMessage);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Exception: {ex.Message}");
                    throw;
                }
            }
        }

        /// <summary>
        /// Raises the MessageReceived event by invoking it, notifying subscribers about the received message
        /// </summary>
        /// <param name="message">Message</param>
        private void OnMessageReceived(string message)
        {
            MessageReceived?.Invoke(this, new MessageReceivedEventArgs(message));
        }
        #endregion
    }
}