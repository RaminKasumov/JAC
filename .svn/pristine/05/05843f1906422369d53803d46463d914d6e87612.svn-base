namespace JACService.Shared
{
    public class ChatMessage : IChatMessage
    {
        #region properties
        /// <summary>
        /// Recipient of the message
        /// </summary>
        public string Recipient { get; set; } = null!;

        /// <summary>
        /// Sender of the message
        /// </summary>
        public string Sender { get; set; } = null!;

        /// <summary>
        /// Content of the message
        /// </summary>
        public string Content { get; set; } = null!;

        /// <summary>
        /// TimeStamp of the message
        /// </summary>
        public string TimeStamp { get; set; }
        
        /// <summary>
        /// Is the message private or not
        /// </summary>
        public bool IsPrivate { get; set; }
        #endregion
        
        #region constructors
        /// <summary>
        /// Constructor for the Class ChatMessage
        /// </summary>
        /// <param name="recipient">Recipient of the message</param>
        /// <param name="sender">Sender of the message</param>
        /// <param name="content">Content of the message</param>
        /// <param name="isPrivate">Is the message private or not</param>
        public ChatMessage(string recipient, string sender, string content, bool isPrivate)
        {
            Recipient = recipient;
            Sender = sender;
            Content = content;
            TimeStamp = DateTime.Now.ToShortTimeString();
            IsPrivate = isPrivate;
        }

        /// <summary>
        /// Constructor for the Class ChatMessage
        /// </summary>
        public ChatMessage()
        {
            TimeStamp = DateTime.Now.ToShortTimeString();
            IsPrivate = false;
        }
        #endregion

        #region methods
        /// <summary>
        /// Converts a string to a ChatMessage object
        /// </summary>
        /// <param name="message">Message</param>
        /// <returns>Converted message</returns>
        public static ChatMessage FromString(string message)
        {
            string[] parts = message.Split('|');
            ChatMessage msg = new ChatMessage(parts[1], parts[2], parts[3], bool.Parse(parts[4]))
            {
                TimeStamp = parts[0]
            };
            return msg;
        }
        
        /// <summary>
        /// Converts a ChatMessage object to a string representation
        /// </summary>
        /// <returns>A string that represents the current ChatMessage object. The string includes the timestamp, recipient, sender, content, and privacy status of the message, separated by the '|' character.</returns>
        public override string ToString()
        {
            return $"{TimeStamp}|{Recipient}|{Sender}|{Content}|{IsPrivate}";
        }
        #endregion
    }
}