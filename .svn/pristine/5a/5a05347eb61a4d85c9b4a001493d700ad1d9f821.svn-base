using System.Runtime.Serialization;
using JACService.Core.Contracts;

namespace JACService.Shared
{
    /// <summary>
    /// Represents a channel in the chat service
    /// </summary>
    [Serializable]
    [DataContract]
    public class Channel : IChannel
    {
        #region properties
        /// <summary>
        /// The name of the channel
        /// </summary>
        [DataMember (Name = "Name")]
        public string Name { get; set; }
        
        /// <summary>
        /// The users in the channel
        /// </summary>
        [DataMember (Name = "Users")]
        public List<IUser> Users { get; set; }

        /// <summary>
        /// The amount of users in the channel
        /// </summary>
        [DataMember (Name = "UsersCount")]
        public int UsersCount => Users.Count;

        /// <summary>
        /// The messages in the channel
        /// </summary>
        [DataMember (Name = "Messages")]
        public List<IChatMessage> Messages { get; set; }

        /// <summary>
        /// Indicates whether the channel is private or not
        /// </summary>
        [DataMember (Name = "IsPrivate")]
        public bool IsPrivate { get; set; }
        #endregion
        
        #region constructor
        /// <summary>
        /// Initializes a new instance of the <see cref="Channel"/> class with the specified name
        /// </summary>
        /// <param name="name">The name of the channel</param>
        public Channel(string name)
        {
            Name = name;
            Users = new List<IUser>();
            Messages = new List<IChatMessage>();
            IsPrivate = false;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Channel"/> class with the default name "Anonymous"
        /// </summary>
        public Channel() : this("Anonymous")
        {
            
        }
        #endregion
        
        #region methods
        /// <summary>
        /// Adds a new user to the channel
        /// </summary>
        /// <param name="user">The user to add</param>
        public void AddUser(IUser user)
        {
            if (!Users.Contains(user))
            {
                Users.Add(user);
            }
        }
        
        /// <summary>
        /// Removes a user from the channel
        /// </summary>
        /// <param name="user">The user to remove</param>
        public void RemoveUser(IUser user)
        {
            Users.Remove(user);
        }
        
        /// <summary>
        /// Adds a new message to the channel
        /// </summary>
        /// <param name="message">The message to add</param>
        public void AddMessage(IChatMessage message)
        {
            if (!Messages.Contains(message))
            {
                Messages.Add(message);
            }
        }
        
        /// <summary>
        /// Removes a message from the channel
        /// </summary>
        /// <param name="message">The message to remove</param>
        public void RemoveMessage(IChatMessage message)
        {
            Messages.Remove(message);
        }
        
        /// <summary>
        /// Loads all messages in the channel
        /// </summary>
        public void LoadMessages()
        {
            ChatMessageStorage chatMessageStorage = ChatMessageStorage.GetInstance();
            List<IChatMessage> messages = chatMessageStorage.GetMessages();
            
            foreach (IChatMessage message in messages)
            {
                if (message.ChannelName == Name)
                {
                    AddMessage(message);
                }
            }
        }

        /// <summary>
        /// Returns a string representation of the channel
        /// </summary>
        /// <returns>A string that represents the channel</returns>
        public override string ToString()
        {
            return $"{Name}|{UsersCount}|{IsPrivate}";
        }
        #endregion
    }
}